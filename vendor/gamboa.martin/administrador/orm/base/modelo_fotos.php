<?php
namespace orm;
use base\dropbox;

use gamboamartin\errores\errores;

use gamboamartin\orm\modelo;
use models\extension;
use PDO;
use stdClass;
use validacion\val_modelo_fotos;


class modelo_fotos extends modelo {

    public _model_fotos_dbx $dbx;

    public string $folder_absoluto = '';
    public string $folder_relativo = '';

    public string $key_finalizado = '';
    public string $key_filtro_finalizado = '';
    public string $key_filtro_rename_doc = '';
    public string $key_id = '';
    public string $key_rename_doc = '';
    public string $key_ruta = '';
    public string $key_ruta_interna = '';
    public string $key_ruta_mini = '';
    public string $key_ruta_relativa = '';
    public string $key_url = '';




    public string $ruta = '';
    public string $ruta_absoluta = '';
    public string $ruta_interna = '';
    public string $ruta_mini = '';
    public string $ruta_relativa = '';
    public string $url = '';

    public array $tablas_children = array();

    public function __construct(PDO $link, string $tabla, array $columnas_extra = array(),
                                array $campos_obligatorios = array(), array $tipo_campos = array(),
                                array $columnas = array(), array $sub_querys = array(),
                                bool $aplica_transaccion_inactivo = true, bool $aplica_bitacora = false,
                                bool $aplica_seguridad = false, array $extension_estructura = array(),
                                array $renombres = array(), bool $validation = false){

        parent::__construct($link, $tabla, $columnas_extra, $campos_obligatorios, $tipo_campos, $columnas, $sub_querys,
            $aplica_transaccion_inactivo, $aplica_bitacora, $aplica_seguridad, $extension_estructura, $renombres,
            $validation);

        $this->tablas_children = array('foto_entrega','foto_evidencia','foto_previa');

        $this->validacion = new val_modelo_fotos();

        $init = $this->init();
        if(errores::$error){
            $error = $this->error->error('Error al inicializar', $init);
            print_r($error);
            die('Error');
        }
        $this->dbx = new _model_fotos_dbx($this);

    }

    /**
     * PRUEBAS FINALIZADAS
     * @return array
     */
    public function alta_bd(): array
    {
        $this->tabla = trim($this->tabla);
        if($this->tabla === ''){
            return $this->error->error('Error $this->tabla esta vacia'.$this->tabla,
                $this->tabla);
        }

        $init = $this->init_alta_bd();
        if(errores::$error){
            return $this->error->error('Error al inicializa registro', $init);
        }

        $r_alta = parent::alta_bd(); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error('Error al dar de alta imagen', $r_alta);
        }

        $upd = $this->upd_data_ruta($r_alta['registro_id']);
        if(errores::$error){
            return $this->error->error('Error asignar datos datos de ruta', $upd);
        }

        return $r_alta;
    }

    /**
     * PRUEBAS FINALIZADAS
     * @param array $foto
     * @return bool|array
     */
    public function aplica_rename(array $foto): bool|array
    {

        $valida = $this->validacion->valida_rutas_rename($this, $foto);
        if(errores::$error){
            return $this->error->error('Error al validar rutas', $valida);
        }


        $aplica_rename = false;

        if($foto[$this->key_url] !== $this->url){
            $aplica_rename = true;
        }
        if($foto[$this->key_ruta_interna] !== $this->ruta_interna){
            $aplica_rename = true;
        }
        if($foto[$this->key_ruta_relativa] !== $this->ruta_relativa){
            $aplica_rename = true;
        }
        if($foto[$this->key_ruta] !== $this->ruta){
            $aplica_rename = true;
        }
        if($foto[$this->key_ruta_mini] !== $this->ruta_mini){
            $aplica_rename = true;
        }
        return $aplica_rename;
    }

    /**
     * PHPUNIT
     * @return array
     */
    private function asigna_data_ruta(): array
    {

        $valida = $this->validacion->valida_rutas($this);
        if(errores::$error){
            return $this->error->error('Error al validar rutas', $valida);
        }

        $data_upd['url'] = $this->url;
        $data_upd['ruta_interna'] = $this->ruta_interna;
        $data_upd['ruta_relativa'] = $this->ruta_relativa;
        $data_upd['ruta'] = $this->ruta;
        $data_upd['ruta_mini'] = $this->ruta_mini;
        return $data_upd;
    }

    /**
     * PRUEBAS FINALIZADAS
     * @param array $foto
     * @return array|stdClass
     */
    public function copy_local(array $foto): array|stdClass
    {

        $valida = $this->validacion->valida_ruta_interna($this, $foto);
        if(errores::$error){
            return $this->error->error('Error al validar $foto', $valida);
        }

        $ruta_actual = $foto[$this->key_ruta_interna];
        $ruta_destino = $this->ruta_interna;

        $data = new stdClass();
        $data->ruta_actual = $ruta_actual;
        $data->ruta_destino = $ruta_destino;

        if(!file_exists($ruta_actual)){
            return $this->error->error('Error no existe la ruta origen', $ruta_actual);
        }

        $aplica_copia = true;
        if($ruta_actual === $ruta_destino && file_exists($ruta_actual)){
            $aplica_copia = false;
        }
        if($aplica_copia) {
            copy($ruta_actual, $ruta_destino);
        }
        if(!file_exists($ruta_destino)){
            return $this->error->error('Error al copiar documento', $ruta_destino);
        }
        $data->aplica_copia = $aplica_copia;
        chmod($ruta_destino, 0777);

        return $data;
    }



    /**
     * PRUEBAS FINALIZADAS
     * @param array $foto
     * @return array|stdClass
     */
    public function ejecuta_rename(array $foto): array|stdClass
    {
        $valida = $this->validacion->valida_ruta_interna($this, $foto);
        if(errores::$error){
            return $this->error->error('Error al validar $foto', $valida);
        }

        $keys = array($this->key_id);
        $valida = $this->validacion->valida_ids($foto, $keys);
        if(errores::$error){
            return $this->error->error('Error al validar $foto', $valida);
        }

        $copy = $this->copy_local($foto);
        if(errores::$error){
            return $this->error->error('Error al copiar en BD', $copy);
        }

        $upd = $this->upd_copy($foto[$this->key_id]);
        if(errores::$error){
            return $this->error->error('Error al actualizar en BD', $upd);
        }

        if($copy->aplica_copia) {
            unlink($copy->ruta_actual);
        }
        return $copy;
    }

    /**
     * PRUEBAS FINALIZADAS
     * @param int $id
     * @return array
     */
    public function elimina_bd(int $id): array
    {


        $valida = $this->validacion->valida_transaccion_upd($id, $this->tabla, $this->tablas_children);
        if(errores::$error){
            return $this->error->error('Error al validar datos', $valida);
        }

        $rutas = $this->rutas($id);
        if(errores::$error){
            return $this->error->error('Error al obtener rutas', $rutas);
        }

        $r_elimina_bd = parent::elimina_bd($id); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error('Error al eliminar foto', $r_elimina_bd);
        }

        $del = $this->elimina_fotos_fisicas();
        if(errores::$error){
            return $this->error->error('Error al eliminar foto de dbx', $del);
        }

        return $r_elimina_bd;
    }

    /**
     * PRUEBAS FINALIZADAS
     * @return array|string
     */
    public function elimina_fotos_fisicas(): array|string
    {
        $valida = $this->validacion->valida_rutas($this);
        if(errores::$error){
            return $this->error->error('Error al validar rutas', $valida);
        }

        if(file_exists($this->ruta_absoluta)){
            unlink($this->ruta_absoluta);
        }
        $del = (new dropbox())->elimina_si_existe($this->ruta_relativa);
        if(errores::$error){
            return $this->error->error('Error al eliminar foto de dbx', $del);
        }
        return $del;

    }

    /**
     * PRUEBAS FINALIZADAS/NO SE MUEVE
     * @param int $id
     * @return bool|array|stdClass
     */
    public function finalizado(int $id): bool|array|stdClass
    {
        $valida = $this->validacion->valida_transaccion_upd($id, $this->tabla, $this->tablas_children);
        if(errores::$error){
            return $this->error->error('Error al validar datos', $valida);
        }

        $init = $this->init_finalizado($id);
        if(errores::$error){
            return $this->error->error('Error al inicializar finalizado', $init);
        }

        $finaliza = $this->dbx->finaliza($init->foto);
        if(errores::$error){
            return $this->error->error('Error al  finalizar', $finaliza);
        }
        return $finaliza;
    }

    /**
     * PRUEBAS FINALIZADAS/NO SE MUEVE
     * @return stdClass|array
     */
    public function folders(): stdClass|array
    {
        $this->tabla = trim($this->tabla);
        if($this->tabla === ''){
            return $this->error->error('Error $this->tabla no puede venir vacia', $this->tabla);
        }
        $this->folder_relativo = 'archivos/'.$this->tabla;
        $this->folder_absoluto = PATH_BASE.'archivos/'.$this->tabla;

        $data = new stdClass();
        $data->folder_relativo = $this->folder_relativo;
        $data->folder_absoluto = $this->folder_absoluto;
        return $data;
    }

    /**
     * PRUEBAS FINALIZADAS
     * @param int $id $id Identificador del documento
     * @return array
     */
    public function foto_para_rename(int $id): array
    {
        $valida = $this->validacion->valida_transaccion_upd($id, $this->tabla, $this->tablas_children);
        if(errores::$error){
            return $this->error->error('Error al validar datos', $valida);
        }

        $foto = $this->registro($id);
        if(errores::$error){
            return $this->error->error('Error al obtener foto', $foto);
        }

        $rutas = $this->rutas($id);
        if(errores::$error){
            return $this->error->error('Error al obtener rutas', $rutas);
        }
        return $foto;
    }

    /**
     * PHPUNIT
     * @param int $id Identificador del documento
     * @return array
     */
    private function genera_data_ruta(int $id): array
    {
        $valida = $this->validacion->valida_transaccion_upd($id, $this->tabla, $this->tablas_children);
        if(errores::$error){
            return $this->error->error('Error al validar datos', $valida);
        }
        $rutas = $this->rutas($id);
        if(errores::$error){
            return $this->error->error('Error al obtener $rutas',$rutas);
        }

        $data_upd = $this->asigna_data_ruta();
        if(errores::$error){
            return $this->error->error('Error asignar datos foto', $data_upd);
        }
        return $data_upd;
    }

    /**
     * PRUEBAS FINALIZADAS/NO SE MUEVE
     * @return array|stdClass
     */
    public function init(): array|stdClass
    {
        $this->tabla = trim($this->tabla);
        if($this->tabla === ''){
            return $this->error->error('Error $this->tabla no puede venir vacia', $this->tabla);
        }
        $data = new stdClass();
        $keys = $this->keys();
        if(errores::$error){
            return $this->error->error('Error al generar $keys', $keys);
        }
        $folders = $this->folders();
        if(errores::$error){
            return $this->error->error('Error al generar folders', $folders);
        }
        if($this->registro_id>0){
            $rutas = $this->rutas($this->registro_id);
            if(errores::$error){
                return $this->error->error('Error al generar rutas', $rutas);
            }
            $data->rutas = $rutas;
        }


        $data->keys = $keys;
        $data->folders = $folders;

        return $data;
    }

    /**
     * PHPUNIT
     * @return array
     */
    private function init_alta_bd(): array
    {
        $this->registro['finalizado'] = 'inactivo';
        $this->registro['status'] = 'activo';
        $this->registro['url'] = 'sin asignar';
        $this->registro['ruta_interna'] = 'sin asignar';
        $this->registro['ruta_relativa'] = 'sin asignar';
        $this->registro['rename_doc'] = 'activo';
        return $this->registro;
    }

    /**
     * PRUEBAS FINALIZADAS/NO SE MUEVE
     * @param int $id
     * @return array|stdClass
     */
    public function init_finalizado(int $id): array|stdClass
    {
        $valida = $this->validacion->valida_transaccion_upd($id, $this->tabla, $this->tablas_children);
        if(errores::$error){
            return $this->error->error('Error al validar datos', $valida);
        }

        $rutas = $this->rutas($id);
        if(errores::$error){
            return $this->error->error('Error al generar rutas', $rutas);
        }
        $foto = $this->registro($id);
        if(errores::$error){
            return $this->error->error('Error al obtener foto', $foto);
        }

        $data = new stdClass();
        $data->rutas = $rutas;
        $data->foto = $foto;
        return $data;
    }

    /**
     * PRUEBAS FINALIZADAS/NO SE MUEVE
     * @return stdClass|array
     */
    public function keys(): stdClass|array
    {
        $this->tabla = trim($this->tabla);
        if($this->tabla === ''){
            return $this->error->error('Error $this->tabla no puede venir vacia', $this->tabla);
        }

        $this->key_id = $this->tabla.'_id';
        $this->key_finalizado = $this->tabla.'_finalizado';
        $this->key_filtro_finalizado = $this->tabla.'.finalizado';
        $this->key_filtro_rename_doc = $this->tabla.'.rename_doc';
        $this->key_rename_doc = $this->tabla.'_rename_doc';
        $this->key_url = $this->tabla.'_url';
        $this->key_ruta_interna = $this->tabla.'_ruta_interna';
        $this->key_ruta_relativa = $this->tabla.'_ruta_relativa';
        $this->key_ruta = $this->tabla.'_ruta';
        $this->key_ruta_mini = $this->tabla.'_ruta_mini';

        $data = new stdClass();
        $data->key_id = $this->key_id;
        $data->key_finalizado = $this->key_finalizado;
        return $data;
    }

    /**
     * PRUEBAS FINALIZADAS/NO SE MUEVE
     * @param array $registro
     * @param int $id
     * @param bool $reactiva
     * @return array
     */
    public function modifica_bd(array $registro, int $id, bool $reactiva = false): array
    {
        $registro['finalizado'] = 'inactivo';
        $r_modifica = parent::modifica_bd($registro, $id, $reactiva); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error('Error al modificar imagen', $r_modifica);
        }
        return $r_modifica;
    }

    /**
     * PHPUNIT
     * @param int $id $id Identificador del documento
     * @param string $extension Extension del documento en forma de texto ej png, xml
     * @return string|array
     */
    private function name_doc(int $id, string $extension): string|array
    {
        if($id<=0){
            return $this->error->error('Error id debe ser mayor a 0', $id);
        }
        $extension = trim($extension);
        if($extension===''){
            return $this->error->error('Error la extension esta vacia', $extension);
        }
        $extension = strtolower($extension);
        $existe_ext = (new extension($this->link))->obten_extension_por_descripcion($extension);
        if(errores::$error){
            return $this->error->error('Error al verificar extension', $existe_ext);
        }
        return $id.'.'.$extension;
    }

    /**
     * PRUEBAS FINALIZADAS
     * @param int $id $id Identificador del documento
     * @return array|bool
     */
    public function rename(int $id): bool|array
    {
        $valida = $this->validacion->valida_transaccion_upd($id, $this->tabla, $this->tablas_children);
        if(errores::$error){
            return $this->error->error('Error al validar datos', $valida);
        }

        $foto = $this->foto_para_rename($id);
        if(errores::$error){
            return $this->error->error('Error al obtener foto', $foto);
        }

        $rename = $this->rename_file($foto);
        if(errores::$error){
            return $this->error->error('Error al copiar en BD', $rename);
        }

        return $rename;
    }

    /**
     * PRUEBAS FINALIZADAS
     * @param array $foto
     * @return bool|array
     */
    public function rename_file(array $foto): bool|array
    {
        if(!isset($foto[$this->key_ruta_interna]) || $foto[$this->key_ruta_interna] === ''){
            $foto[$this->key_ruta_interna] = $foto[$this->key_ruta];
        }
        if(!isset($foto[$this->key_ruta_relativa]) || $foto[$this->key_ruta_relativa] === ''){
            $foto[$this->key_ruta_relativa] = $foto[$this->key_ruta];
        }
        if(!isset($foto[$this->key_ruta]) || $foto[$this->key_ruta] === ''){
            $foto[$this->key_ruta] = $foto[$this->key_ruta_interna];
        }
        if(!isset($foto[$this->key_ruta_mini]) || $foto[$this->key_ruta_mini] === ''){
            $foto[$this->key_ruta_mini] = $foto[$this->key_ruta_interna];
        }
        if(!isset($foto[$this->key_url]) || $foto[$this->key_url] === ''){
            $foto[$this->key_url] = $foto[$this->key_ruta_interna];
        }

        $valida = $this->validacion->valida_rutas_rename($this, $foto);
        if(errores::$error){
            return $this->error->error('Error al validar rutas', $valida);
        }

        $aplica_rename = $this->aplica_rename($foto);
        if(errores::$error){
            return $this->error->error('Error al $aplica_rename', $aplica_rename);
        }

        if($aplica_rename){
            $copy = $this->ejecuta_rename($foto);
            if(errores::$error){
                return $this->error->error('Error al copiar en BD', $copy);
            }
        }
        return $aplica_rename;
    }

    /**
     * PHPUNIT
     * @param int $id $id Identificador del documento
     * @param string $extension Extension del documento en forma de texto ej png, xml
     * @return array|string
     */
    private function ruta_relativa_alta(int $id, string $extension): array|string
    {
        if($id<=0){
            return $this->error->error('Error id debe ser mayor a 0', $id);
        }
        $extension = trim($extension);
        if($extension===''){
            return $this->error->error('Error la extension esta vacia', $extension);
        }
        $extension = strtolower($extension);

        $name_doc = $this->name_doc($id, $extension);
        if(errores::$error){
            return $this->error->error('Error al obtener $name_doc', $name_doc);
        }

        $this->ruta_relativa = $this->folder_relativo.'/'.$name_doc;
        
        return $this->ruta_relativa;
    }

    /**
     * PHPUNIT
     * @param int $id $id Identificador del documento
     * @return array|stdClass
     */
    public function rutas(int $id): array|stdClass
    {
        $valida = $this->validacion->valida_transaccion_upd($id, $this->tabla, $this->tablas_children);
        if(errores::$error){
            return $this->error->error('Error al validar datos', $valida);
        }

        $foto = $this->registro($id);
        if(errores::$error){
            return $this->error->error('Error al obtener foto', $foto);
        }
        $url = $this->url($id);
        if(errores::$error){
            return $this->error->error('Error al obtener url', $url);
        }

        $this->ruta_relativa = $this->folder_relativo.'/'.$foto[$this->key_id].'.'.$foto['extension_ext'];
        $this->ruta_absoluta = PATH_BASE.$this->ruta_relativa;
        $this->ruta_interna =  $this->ruta_absoluta;
        $this->ruta =  $this->ruta_absoluta;
        $this->ruta_mini =  $this->ruta_absoluta;

        $data = new stdClass();
        $data->ruta_relativa = $this->ruta_relativa;
        $data->ruta_absoluta = $this->ruta_absoluta;
        $data->ruta_interna = $this->ruta_absoluta;
        $data->url = $this->url;
        $data->ruta = $this->ruta;
        return $data;
    }

    /**
     * PRUEBAS FINALIZADAS
     * @param int $limit
     * @return array
     */
    public function sin_finalizar(int $limit): array
    {
        if($limit <=0){
            return $this->error->error('Error limit debe ser mayor a 0', $limit);
        }
        $filtro[$this->key_filtro_finalizado] = 'inactivo';
        $r_foto = $this->filtro_and(filtro: $filtro, limit: $limit);
        if(errores::$error){
            return $this->error->error('Error al obtener fotos', $r_foto);
        }
        return $r_foto['registros'];
    }

    /**
     * PRUEBAS FINALIZADAS
     * @param int $limit
     * @return array
     */
    public function sin_rename(int $limit): array
    {
        if($limit <=0){
            return $this->error->error('Error limit debe ser mayor a 0', $limit);
        }
        $filtro[$this->key_filtro_rename_doc] = 'inactivo';
        $r_foto = $this->filtro_and(filtro: $filtro, limit: $limit);
        if(errores::$error){
            return $this->error->error('Error al obtener fotos', $r_foto);
        }
        return $r_foto['registros'];
    }

    /**
     * PHPUNIT
     * @param int $id
     * @return bool|array
     */
    private function upd_copy(int $id): bool|array
    {
        $valida = $this->validacion->valida_transaccion_upd($id, $this->tabla, $this->tablas_children);
        if(errores::$error){
            return $this->error->error('Error al validar datos', $valida);
        }
        $upd = $this->upd_data_ruta($id);
        if(errores::$error){
            return $this->error->error('Error al actualizar en BD', $upd);
        }

        $upd = $this->upd_rename($id);
        if(errores::$error){
            return $this->error->error('Error al actualizar en BD', $upd);
        }
        return true;
    }

    /**
     * PRUEBAS FINALIZADAS
     * @param int $id Identificador del documento
     * @return array
     */
    public function upd_data_ruta(int $id): array
    {
        $valida = $this->validacion->valida_transaccion_upd($id, $this->tabla, $this->tablas_children);
        if(errores::$error){
            return $this->error->error('Error al validar datos', $valida);
        }
        $data_upd = $this->genera_data_ruta($id);
        if(errores::$error){
            return $this->error->error('Error asignar datos foto', $data_upd);
        }

        $upd = parent::modifica_bd($data_upd, $id);
        if(errores::$error){
            return $this->error->error('Error actualizar foto', $upd);
        }
        return $upd;
    }

    /**
     * PRUEBAS FINALIZADAS/NO SE MUEVE
     * @param int $id
     * @return array
     */
    public function upd_finalizado(int $id): array
    {
        $valida = $this->validacion->valida_transaccion_upd($id, $this->tabla, $this->tablas_children);
        if(errores::$error){
            return $this->error->error('Error al validar datos', $valida);
        }
        $data_upd['finalizado'] = 'activo';
        $upd = parent::modifica_bd($data_upd, $id);
        if(errores::$error){
            return $this->error->error('Error al finalizar en db', $upd);
        }
        return $upd;
    }

    /**
     * PRUEBAS FINALIZADAS
     * @param int $id
     * @return array
     */
    public function upd_rename(int $id): array
    {
        $valida = $this->validacion->valida_transaccion_upd($id, $this->tabla, $this->tablas_children);
        if(errores::$error){
            return $this->error->error('Error al validar datos', $valida);
        }
        $data_upd['rename_doc'] = 'activo';
        $upd = parent::modifica_bd($data_upd, $id);
        if(errores::$error){
            return $this->error->error('Error al actualizar en BD', $upd);
        }
        return $upd;
    }

    /**
     * PRUEBAS FINALIZADAS
     * @param int $id $id Identificador del documento
     * @return array|string
     */
    public function url(int $id): array|string
    {
        $valida = $this->validacion->valida_transaccion_upd($id, $this->tabla, $this->tablas_children);
        if(errores::$error){
            return $this->error->error('Error al validar datos', $valida);
        }
        $foto = $this->registro($id);
        if(errores::$error){
            return $this->error->error('Error al obtener foto', $foto);
        }
        $ruta_relativa = $this->ruta_relativa_alta($id, $foto['extension_ext']);
        if(errores::$error){
            return $this->error->error('Error al obtener $ruta_relativa', $ruta_relativa);
        }
        $this->url = URL_BASE.$ruta_relativa;
        return $this->url;
    }

}
